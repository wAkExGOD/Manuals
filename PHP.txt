Операции с файлами
    // require - подключает файл. Если он не найден, выдает ошибку. Код дальше не выполняется.
    // include - подключает файл. Если он не найден, код выполняется дальше.
    // require_once/include_once - подключает файл. Если он был раньше подключен, то он
       не добавляется еще раз.
    // fopen("a.txt", "r") - открывает файл только для чтения
    // fopen("a.txt", "r+") - открывает файл только для чтения и записи
    // fopen("a.txt", "w") - открывает файл только для записи (если файла нет, то он создастся)
    // fopen("a.txt", "w+") - открывает файл только для чтения записи (если файла нет, то он создастся)
    // fopen("a.txt", "a") - открывает файл только для записи ; помещает указатель в конец файла
    // fopen("a.txt", "a+") - открывает файл только для чтения записи помещает указатель в конец файла
    // fopen("a.txt", "a+t") - открывает файл для четния и записи; в файл могут писать /n и тд
    // fclose($file) - закрывает файл
    // fread($file, 1) - читает первый символ файла файл
    // fseek($file, 1) - ставит курсор на первый символ файла $file
    // file_put_contents("c.txt", "Aa1") - создает файл c.txt и помещает в него строку "Aa1"
    // file_get_contents("c.txt") - берет весь контент файла c.txt
    // file_exists("b.txt") - проверяет, существует ли файл b.txt (возвращает ничего или "1")
    // filesize("c.txt") - находит размер файла в байтах
    // rename("c.txt", "b.txt") - переименовывает файл c.txt в b.txt
    // unlink("b.txt") - удаляет файл b.txt
    


Математические операции
    // abs() - находит модуль числа
    // round() - округляет по матем. правилам
    // floor() - округляет к большему
    // ceil() - округляет к меньшему
    // mt_rand(1, 10) - находит рандомное число из диапазона целых чисел
    // min() - находит минимальное число среди элементов
    // max() - находит максимальное число среди элементов
    // sin/cos/tan/asin/acos/atan() - находит синус/косинус/тангенс и тд числа

Строковые функции
    // strlen() - считает количество символов
    // - strpos($string, "is") - находит позицию "is" в строке $string (считает первый элемент с нуля);
       - strpos($string, "is", 4) -  находит позицию "is" в строке $string с 4 элемента
    // - substr($string, 3) - вырезает 3 первых символа строки $string
       - substr($string, 3, 7) - вырезает часть строки $string (от 3 до 7 символа)
       - substr($string, 3, -2) - вырезает 3 первых символа строки $string И 2 символа с конца строки
    // str_replace("is", "abc", $string) - заменяет в строке $string "is" на "abc"
    // htmlspecialchars() - принимает строку, как строку
    // strtolower() - приводит строку к нижнему регистру
    // strtoupper() - приводит строку к верхнему регистру
    // md5() - кодирует строку
    // trim() - удаляет пробелы перед и после строки

Функции для работы с массивами
    // count() - посчитать количество элементов массива
    // sort() - отсортировать массив по возрастанию
    // print_r() - выводит массив
    // rsort() - отсортировать массив по убыванию
    // unset($array[0]) - удаляет 1 элемент массива $array

    // asort() - отсортировать ассоциативный массив по возрастанию
    // arsort() - отсортировать ассоциативный массив по убыванию
    // ksort() - отсортировать ассоциативный массив по ключам по возрастанию
    // krsort() - отсортировать ассоциативный массив по ключам по убыванию

    // shuffle() - рандомно меняет элементы в массиве
    // in_array(10, $array) - проверяет, есть ли 10 в массиве $array (оставляет ничего или 1)
    // array_merge($arr_1, $arr_2) - слаживает 2 массива
    // array_slice($arr, 1) - вырежется 1 элемент массива
       array_slice($arr, 1, 5) - вырежется 1 элемент, и запишутся следующие 5 элементов

Функции даты
    // time() - возвращает кол-во секунд с 1 января 1970 года
    // microtime(true) - возвращает то же, что и time(), но более точно (с милисекундами)
    // date("Y-m-d H:i:s) - возвращает дату в формате 2020-02-04 15:23:06
       date("Y-m-d H:i:s, 12312312312) - возвращает дату, которая была через 12312312312 секунд после 01.1970
    // mktime(12, 35, 23, 12, 7, 2007) - возвращает дату в количестве секунд, прошедших после 01.1970
    // getdate(mktime(12, 35, 23, 12, 7, 2007)) - возвращает дату, прошедщую после определенных секунд
    // checkdate(2, 28, 2020) - проверяет, существует ли такой день

Права доступа
    // echo __FILE__ - выводит путь к файлу
    // fileperms(__FILE__) - выводит права доступа файла
    // chmod(__FILE__, 0777) - изменяет права доступа к файлу на 7 7 7

	phpinfo() и $_SERVER
    // phpinfo() - выводит информацию о версии php и так далее
    // $_SERVER - можно узнавать о пользователе всё

Редирект
    // header("Location: abc.html / https://www.google.com") - перенаправляет пользователя на страницу
    // exit - заканчивает выполнение кода после редиректа

Отправка сообщений на email
    // [в основном надо делать так:] 
	$message = "Ку.\n Да";
	$to = "vladpanasik@mail.ru";
	$from = "vladpanasik@gmail.com";
	$subject = "Тема сообщения";
	$subject = "=?utf-8?B?".base64_encode($subject)."?=";
	$headers = "From: $from\r\nReply-to: $from\r\nContent-type: text/plain; charset=utf-8\r\n";
	mail($to, $subject, $message, $headers);
    //

Работа с $_COOKIE
    // - setcookie("num", 10) - установление в куки переменной num значение 10
       - setcookie("num", 10, time() + 7) - то же, но куки удаляется через 7 секунд
    // $_COOKIE["num"] - взять из куки значение переменной num
    // СЧЕТЧИК ПЕРЕЗАГРУЗКИ СТРАНИЦЫ:
       $num = (isset($_COOKIE["num"])) ? $_COOKIE["num"] : 0;
       $num++;
       setcookie("num", $num, time()+4);
       echo "Пользователь обновил страницу $num раз";

Работа с сессиями
	! Сессии хранятся на сервере; безопаснее, чем куки; куки в браузере
    // session_start() - начинает сессию; пропадет через 15 минут
    // session_destroy() - удаляет сессию


MySQL
    // Запросы